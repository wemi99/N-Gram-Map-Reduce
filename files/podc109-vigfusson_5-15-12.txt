Brief Announcement: Live Streaming
with Utilities, Quality and Cost
Ymir Vigfusson

Ken Birman

Daniel A. Freedman

Reykjavik University
Reykjavik, Iceland, 105

Cornell University
Ithaca, New York, 14850

Cornell University
Ithaca, New York, 14850

Qi Huang

Kristján V. Jónsson

Gunnar Sigurbjörnsson

Cornell University
Ithaca, New York, 14850

Reykjavik University
Reykjavik, Iceland, 105

Reykjavik University
Reykjavik, Iceland, 105

Categories and Subject Descriptors
C.2.4 [Computer Communication]: Distributed Systems

General Terms
Algorithms, Theory

Keywords
live streaming, utility, optimization, approximation algorithm

1.

INTRODUCTION

The growth in Internet traffic associated with video streaming and
sharing of live video content is so rapid that it may soon dwarf all
other forms of Internet content. By late 2012, Internet video alone
is projected to generate almost 10 exabytes of traffic per month,
accounting for nearly 50 percent of all Internet traffic [3]. ISPs
and content providers are faced with the challenge of devising and
deploying technologies to accommodate the surging demand for
bandwidth. Data generated in real-time such as by live video broadcasts (e.g. sports games or new episodes of popular TV shows), chat
systems, immersive virtual reality applications and games typically
can’t be cached at all. In today’s systems, each client may pull such
information on its own point-to-point stream directly from the data
center, even if large numbers of clients share interest in at least some
aspects of the data.
Here, we lay the groundwork for a new overlay networking architecture called G RADIENT aimed at reducing the load on providers
of live-streaming content. At the crux of G RADIENT is an algorithm
to construct dissemination overlays for each data stream. Nodes
express their utility for receiving each stream at a given rate, which
allows us to explore the trade-off between offering a lower-quality
stream to a greater number of nodes and high-quality transmissions
for fewer nodes. The idea is that intermediate nodes can downgrade
the quality of the streams they receive and transmit at a lower rate if
needed.
We present a cost model of the network and users, and give an
effective algorithm to route streams to balance user utility with
bandwidth costs by transforming inflight data to match the live
stream to the preferences and requirements of the consumer.

2.

MODEL AND ALGORITHM

Copyright is held by the author/owner(s).
PODC’12, July 16–18, 2012, Madeira, Portugal.
ACM 978-1-4503-1450-3/12/07.

Consider a collection S of content streams that must be disseminated over an undirected graph G = (V, E). Each edge e ∈ E
has a cost ce ≥ 0, reflecting e.g. actual unit bandwidth costs. For
simplicity, we assume that the source streams originate at a single,
abstract source node s ∈ V . This assumption is reasonable in our
context since services must store media contents (such as a CDN)
or maintain consistency (such as a virtual reality service) at some
central location, but is not restrictive since one can model multiple
content sources by connecting each to s at a zero cost.
Other nodes v ∈ V subscribe to a subset of the streams in S, and
express preferences for the quality they receive for each stream in
terms of a utility function. Note that some nodes in G need not be
subscribed to any stream, but may instead act as proxies. In our scenarios, nodes tend to subscribe to multiple concurrent streams, such
as different object update streams in the case of virtual reality, or media in the case where a node collectively represents the customers of
an ISP. We express these subscriptions in terms of utility: each node
v ∈ V derives ui (v, r) ≥ 0 utility for receiving stream i ∈ S at
rate r. For convenience, we assume that each rate r is chosen among
finitely many rates 0 = r0 < r1 < · · · < rk , and ui (v, 0) = 0 always. For example, (r0 , r1 , r2 ) = (0, 200 Kbps, 400 Kbps) means
that stream i may be received by subscribers at either 200 or 400
Kbps, or not at all. Let R = {r0 , r1 , . . . , rk }.
Users receive zero utility, ui (i, ·) = 0, if they are not interested in
stream i ∈ S. We further assume that utility grows monotonically in
r, more specifically that receiving a stream i at rate ra > rb provides
more benefit for the user so ui (v, ra ) ≥ ui (v, rb ). Note that if a
stream is not available at a high rate rj then ui (v, rj ) = ui (v, rj−1 ),
i.e., the marginal utility is zero.
High-Level Goal. We define a routing tree here to be a directed
tree T ⊆ E rooted away from s, along with rates ρ(T, e) for e ∈ T
such that rates along a directed path from s are non-increasing. With
abuse of notation, for each e ∈ T we let ρ(T, v) = ρ(T, (u, v))
be the incoming rate to vertex v in the tree. Set ρ(T, v) = 0 and
ρ(T, e) = 0 for vertices v and edges e not in T .
At a high level, our goal is to find a collection of routing trees Ti
in G for every stream i ∈ S to maximize the utilities of nodes who
receive each stream, while simultaneously minimizing the pro-rated
cost of the trees. More specifically, we wish to find a collection of
trees (Ti )i∈S to maximize
XX
XX
ui (v, ρ(Ti , v)) −
ρ(Ti , e) · ce .
(1)
i∈S v∈V

i∈S e∈E

The problem is clearly N P -complete since it generalizes the Steiner
tree problem, which corresponds to unit rates and infinite utilities at
terminal nodes.
Linear Program. We next formulate the optimization problem

Algorithm 1 Primal-dual approximation algorithm L S.
Input: A graph G = (V, E), edge costs ce for e ∈ E, streams
S originating in s ∈ V , utility ui (v, r) ≥ 0 for node v ∈ V
receiving stream i ∈ S at rate r ∈ R where R is a finite set of
possible rates. We augment the graph G as described to produce
G0 = (V 0 , E 0 ) and πvr ≥ 0 for v ∈ V 0 , r ∈ R.
Output: A routing tree over G0 for each stream i ∈ S.
We run the remaining steps for each stream i ∈ S.
for each rate r = r1 , r2 , . . . , rk in R do
- Let C(r) ← {{v} : v ∈ V 0 } be a spanning forest.
- Grow ySr uniformly for each untagged component S ∈ C(r)
with rS = r until either dual inequality is tight.
- If inequality (3) is tight due to an edge e connecting two distinct components in C(r), we merge the components spanned
by e in C(r) and tag e.
- If inequality (4) is tight, we tag the component S ∈ C(r)
which we intend to exclude from the graph.
- Stop growing when there are no untagged components S ∈
C(r) with rS = r left.
end for
Traverse the list of tagged edges and components in reverse order,
discarding items whose removal produce a feasible solution.

above as a linear program. Because the routing trees are independent
from one another in our formulation, we will hereafter focus our
attention on computing the best routing tree for a single, fixed stream
i ∈ S. The routing trees for each stream can then be composed.
We note that the resulting network could place burden on individual
users. We defer link capacity concerns since we believe live streams
will not represent a bandwidth bottleneck between ISPs, but note
that methods from Steiner tree packing [6] may help to minimize
the maximum congestion on network edges.
Augmented Graph. For the sake of analysis, it is convenient
for each vertex v ∈ V to demand the stream at a particular rate
or not to demand it at all. To accomplish this, we transform the
original graph G as follows. Replace each node v ∈ V with interest
in stream i with a chain of nodes v0 , . . . , vk and zero cost edges
between (vj , vj+1 ) for 0 ≤ j < k, such that the original neighbors
of v connect to v0 . Node vj demands stream i at rate rj with a
prize πvj ,rj = ui (v, rj ) for 1 ≤ j < k and πv0 ,r0 = 0. We
further modify the graph by replicating each edge e ∈ E to create
k + 1 parallel edges (e, r0 ), (e, r1 ), . . . , (e, rk ) ∈ E 0 of cost ce .
Let G0 = (V, E 0 ) denote the final modified graph.
We define rS as the maximum rate demanded by the vertices
v ∈ S ⊆ V in G0 , specifically the highest rate which has a non-zero
prize in S.
The problem we have been describing is equivalent to the following integer program [1].
X
X
X
Min
xe,r · r · ce +
zT,r
πv,r
(e,r)∈E 0

T ⊆V −{s}
r∈R

(e,r)∈δ(S)
r=rS

xe,r +

1
2

X
(e,r)∈δ(S)
r>rS

xe,r +

X

S⊆V −{s}

P

S:e∈δ(S)
rS =r

yS +

1
2

P

S:e∈δ(S)
rS <r

yS ≤ r · ce

∀(e, r) ∈ E 0
(3)

P

S⊆T
r=rS

yS ≤

P
v∈T

πv,r

r ∈ R,

∀T ⊆ V − {s}
(4)

yS ≥ 0 ∀S ⊆ V − {s}.
T HEOREM 1. The solution found by the algorithm in Fig. 1 for
stream i ∈ S costs at most 5.986 · OPT.
P ROOF. (Sketch) The proof has four steps. We first use randomized doubling [2] to round each traffic rate r in an instance of the
problem to aγ+j ≥ r for a fixed α, value of γ ∈ [0, 1] was uniformly at random, and the lowest integral value of j. The cost of the
rounded instance is at most α factor greater than the original.
We next bound the cost of the solution found by the algorithm
on the rounded instance as a multiple of the dual solution, since
the value of any dual feasible solution is at most the value of the
optimum solution for the primal. By looking at the edges (e, r)
chosen by the algorithm when
 the constraint (3)is tight, we find
X
2α − 3
rj
2α
yS ≥ ce rj −
·
= ce rj
that
a 2α − 1
2α − 1
S:e∈δ(S);rS =rj

for 0 ≤ j ≤ k. One can derive a similar bound on the cost of the
graph components T included by the algorithm.
Next, we analyze L S in the Prize-Collecting Steiner Tree (PCST)
framework [4, 5]. If C(r) is the set of active components in the
output with rS = r for S ∈ C(r), then the number of edges of rate
r between the components in C(r) is at most 2C(r). Using PCST
arguments, the solution found by L S costs at most
P
4α−2
2α−1
(5)
2 · 2α−3
S⊆V −{s} yS ≤ 2α−3 OPT
where OPT is the cost of the optimal solution to the linear program
of the rounded instance.
Finally, we determine the ideal value of α to minimize rounding
error using calculus. Combined with (5), L S produces a solution
with cost within a (4a−2)(a−1)
factor of the optimum. This ex(2a−3) ln a
pression is minimized numerically at a = 3.447, yielding a 5.986approximation algorithm.

v∈T

(2)
X

the new cost function (2) is equivalent to the original cost function
(1), shifted by the total available prizes. The 12 -term allows traffic to
be tunneled via a component (requiring at least a pair of edges) at a
faster rate than required by the nodes in the component.
We relax the integrality constraints: xe,r , zT,r ≥ 0 for all T ⊆
V − {s} and r ∈ R. The dual of the linear program is as follows.
X
Max
yS

zT,r ≥ 1 ∀S ⊆ V − {s}

T ⊇S
r=rS

xe,r , zT,r ∈ {0, 1}, ∀T ⊆ V − {s}, r ∈ R
Here, δ(S) denotes the set of edges crossing the (S, V − S) cut,
i.e. the edges with one endpoint in S and the other in V − S. The
binary vector ~x corresponds to the edges and edge rates picked as
part of the routing tree, and for which we pay a cost. Conversely,
the ~z denotes the vertices outside of the routing tree, and for which
we pay a penalty equal to the prizes we did not collect. Note that

ACKNOWLEDGMENT
We gratefully acknowledge Graduate Studies Grant #080520008 from the
Icelandic Centre for Research (Rannís).

3.
REFERENCES
[1] G. Calinescu, C. Fernandes, I. Mandoiu, A. Olshevsky, K. Yang, and A. Zelikovsky. Primal-dual algorithms for
QoS multimedia multicast. In Proceedings. of IEEE GLOBECOM, pages 1–17, 2003.
[2] M. Charikar, J. S. Naor, and B. Schieber. Resource optimization in QoS multicast routing of real-time multimedia.
IEEE/ACM Trans. Netw., 12(2):340–348, 2004.
[3] Cisco. Approaching the zettabyte Era. Cisco Visual Networking Index, page 23, 2008.
[4] M. X. Goemans and D. P. Williamson. A general approximation technique for constrained forest problems. In
SODA ’92: Proceedings of the third annual ACM-SIAM symposium on Discrete algorithms, pages 307–316,
Philadelphia, PA, USA, 1992. Society for Industrial and Applied Mathematics.
[5] M. X. Goemans and D. P. Williamson. The primal-dual method for approximation algorithms and its application to
network design problems. pages 144–191, 1997.
[6] K. Jain, M. Mahdian, and M. R. Salavatipour. Packing Steiner trees. In SODA ’03: Proceedings of the fourteenth
annual ACM-SIAM symposium on Discrete algorithms, pages 266–274, Philadelphia, PA, USA, 2003. Society for
Industrial and Applied Mathematics.

